name: "Godot Export"
on: [push, workflow_dispatch]
env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: Chronos-Descent
  PROJECT_PATH: "."
  ANDROID_HOME: "/usr/lib/android-sdk"

jobs:
  export-platforms:
    name: Export for ${{ matrix.platform.name }}
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:mono-4.3
    strategy:
      matrix:
        platform:
          # - name: windows
          #   preset: "Windows Desktop"
          #   ext: "exe"
          #   debug: true
          # - name: linux
          #   preset: "Linux"
          #   ext: "x86_64"
          #   debug: true
          # - name: mac
          #   preset: "macOS"
          #   ext: "zip"
          - name: "android"
            preset: "Android"
            ext: "apk"
            debug: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools/tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
          unzip commandlinetools-linux-*_latest.zip
          mv cmdline-tools/* $ANDROID_HOME/cmdline-tools/tools/
          rm -rf cmdline-tools
          rm commandlinetools-linux-*_latest.zip

          export PATH=$ANDROID_HOME/cmdline-tools/tools/bin:$PATH

          # Accept licenses before installing components
          mkdir -p $ANDROID_HOME/licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license

          # Install required components
          $ANDROID_HOME/cmdline-tools/tools/bin/sdkmanager --update
          $ANDROID_HOME/cmdline-tools/tools/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;28.0.13004108" "cmake;3.31.5"

          # Generate debug keystore (ensure it's in the right location)
          mkdir -p ~/.android
          keytool -keyalg RSA -genkeypair -alias androiddebugkey -keypass android -keystore ~/.android/debug.keystore -storepass android -dname "CN=Android Debug,O=Android,C=US" -validity 9999
          # Also keep a copy in /root for compatibility
          cp ~/.android/debug.keystore /root/debug.keystore

          # Set permissions to make sure Godot can access it
          chmod 644 ~/.android/debug.keystore
          chmod 644 /root/debug.keystore

          # Show keystore to verify it exists
          ls -la ~/.android/

          # Add platform-tools and build-tools to PATH
          export PATH=$ANDROID_HOME/platform-tools:$PATH
          export PATH=$ANDROID_HOME/build-tools/34.0.0:$PATH

          # Find build-tools directory and add to PATH
          BUILD_TOOLS_DIR=$(find $ANDROID_HOME/build-tools -type d | sort -r | head -1)
          echo "Using build-tools from: $BUILD_TOOLS_DIR"
          export PATH=$ANDROID_HOME/platform-tools:$BUILD_TOOLS_DIR:$PATH

          # Verify zipalign and apksigner are available
          which zipalign || echo "zipalign not found in PATH"
          which apksigner || echo "apksigner not found in PATH"

          # If zipalign not found, try to find it directly
          if ! which zipalign > /dev/null; then
            export ZIPALIGN=$(find $ANDROID_HOME -name "zipalign" -type f | head -1)
            export APKSIGNER=$(find $ANDROID_HOME -name "apksigner" -type f | head -1)
            echo "Found zipalign at: $ZIPALIGN"
            echo "Found apksigner at: $APKSIGNER"
          else
            export ZIPALIGN=zipalign
            export APKSIGNER=apksigner
          fi

      - name: Verify Android SDK installation
        run: |
          ls -la $ANDROID_HOME
          echo "PATH components:"
          echo $PATH
          ls -la $ANDROID_HOME/platform-tools || echo "platform-tools not found"
          ls -la $ANDROID_HOME/build-tools || echo "build-tools not found"

          # Check Godot's Android export settings
          echo "Checking Godot project's Android export settings..."
          mkdir -p ~/.config/godot/

          # Ensure Godot knows where Android SDK is located
          # Create or update editor_settings if it doesn't exist
          cat > ~/.config/godot/editor_settings-4.tres << EOF
          [gd_resource type="EditorSettings" format=3]

          [resource]
          export/android/android_sdk_path = "$ANDROID_HOME"
          export/android/debug_keystore = "$HOME/.android/debug.keystore"
          export/android/debug_keystore_user = "androiddebugkey"
          export/android/debug_keystore_pass = "android"
          EOF

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.300"

      - name: Setup export templates
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mkdir -v -p ~/.config/
          [ -d /root/.config/godot ] && mv /root/.config/godot ~/.config/godot || true
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono

      - name: Build for ${{ matrix.platform.name }}
        shell: bash
        run: |
          mkdir -v -p build/${{ matrix.platform.name }}
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          EXPORT_FLAG="${{ matrix.platform.debug == true && '--export-debug' || '--export-release' }}"
          EXPORT_OUTPUT="$EXPORT_DIR/$EXPORT_NAME.${{ matrix.platform.ext }}"

          # Export the build with Godot
          godot --headless --verbose $EXPORT_FLAG "${{ matrix.platform.preset }}" $EXPORT_OUTPUT

          # Verify the build was created
          ls -la $EXPORT_DIR

          # If this is not an Android build, we can just return the export
          if [ "${{ matrix.platform.name }}" != "android" ]; then
            return 0 2> /dev/null || exit 0
          fi

          # For Android, we'll need to manually sign the APK
          # First, let's align the APK with zipalign
          echo "Aligning APK..."
          ALIGNED_APK="$EXPORT_DIR/${EXPORT_NAME}_aligned.apk"
          $ZIPALIGN -v 4 $EXPORT_OUTPUT $ALIGNED_APK

          # Now sign the aligned APK
          echo "Signing APK..."
          SIGNED_APK="$EXPORT_DIR/${EXPORT_NAME}_signed.apk"
          $APKSIGNER sign --ks ~/.android/debug.keystore \
                        --ks-pass pass:android \
                        --key-pass pass:android \
                        --out $SIGNED_APK \
                        $ALIGNED_APK

          # Verify the signature
          echo "Verifying signature..."
          $APKSIGNER verify --verbose $SIGNED_APK

          # Replace the original APK with the signed one
          mv $SIGNED_APK $EXPORT_OUTPUT

          # Clean up the aligned APK
          rm $ALIGNED_APK

          echo "Final APK is at: $EXPORT_OUTPUT"
          ls -la $EXPORT_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}${{ matrix.platform.debug == true && '_debug' || '_release' }}
          path: build/
